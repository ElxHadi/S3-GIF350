@startuml menuFact

skinparam class {
    BackgroundColor<<MVC>> LightBlue
    BackgroundColor<<Factory>> LightGreen
    BorderColor black
    ArrowColor black
    ClassFontColor black
}

' // Controller Class (MVC)
class MenuFactController <<MVC>> {
    - menu : Menu
    - bill : Bill
    - view : MenuFactView
    - inventory : Inventory
    + MenuFactController(menu : Menu, bill : Bill, view : MenuFactView, inventory : Inventory)
    + displayWelcomeMessage() : void
    + displayMenu() : void
    + displayBill() : void
    + run() : void
}

' // View Class (MVC)
class MenuFactView <<MVC>> {
    + displayMenu(menu : Menu) : void
    + displayBill(bill : Bill) : void
    + showWelcomeMessage() : void
}

' // Models
class Menu {
    - description : String
    - plats : List<Plat>
    + addPlat(plat : Plat) : void
    + removePlat(plat : Plat) : void
    + getPlatByCode(code : int) : Plat
}

class Bill {
    - LocalDateTime date : LocalDateTime
    - BillState state : BillState
    - Client client : Client
    - platQuantities : Map<Plat, Integer>
    + addPlat(plat : Plat, quantity : int) : void
    + removePlat(plat : Plat) : void
    + modifyBill(plat : Plat, quantity : int) : void
    + getTotal() : double
}

class Plat {
    - code : int
    - description : String
    - ingredients : Map<Ingredient, Double>
    + getCode() : int
    + getDescription() : String
    + getIngredients() : Map<Ingredient, Double>
    + getPlatPrice() : double
}

class KidsPlat {
    - proportion : double
    + KidsPlat(code : int, description : String, proportion : double) 
    + getPlatPrice() : double @Override
}

class HealthyPlat {
    - calories : double
    - cholesterol : double
    - fat : double
    + HealthyPlat(code : int, description : String, calories : double, cholesterol : double, fat : double)
}

class Client {
    - id : int
    - name : String
    + Client(id : int, name : String)
}

class Ingredient {
    - code : int
    - name : String
    - type : IngredientType
    - pricePerUnit : double
    - unit : IngredientUnit
}

class Inventory {
    - availableIngredients : Map<Ingredient, Integer>
    + addIngredient(ingredient : Ingredient, quantity : int) : void
    + removeIngredient(ingredient : Ingredient, quantity : int) : void
    + modifyIngredientQuantity(ingredient : Ingredient, quantity : int) : void
    + getAvailableQuantity(ingredient : Ingredient) : int
    + getIngredientsList() : Map<Ingredient, Integer>
}

enum IngredientType {
    SOLID,
    LIQUID
}

enum IngredientUnit {
    KG,
    G,
    MG,
    L,
    ML
}

enum BillState {
    OPEN,
    CLOSED,
    PAID
}

' // Factory Pattern (Factory)
class PlatFactory <<Factory>> {
    + createPlat(platType : PlatType, code : int, description : String, additionalParams : double...) : Plat
}

enum PlatType {
    REGULAR,
    KIDS,
    HEALTHY
}

' Associations and cardinalities
MenuFactController "1" -- "1" MenuFactView : "controls"
MenuFactView "1" -- "*" Menu : "displays"
MenuFactView "1" -- "*" Bill : "displays"
Menu "1" o-- "0..*" Plat : "contains"
Bill "1" o-- "0..*" Plat : "contains"
Bill "1" o-- "1" Client : "belongs to"
PlatFactory "1" --> "1" Plat : "creates"
PlatFactory ..> PlatType : "uses"
KidsPlat --|> Plat
HealthyPlat --|> Plat
Bill -- BillState : "has"
Inventory "1" -- "0..*" Ingredient : "contains"
Plat "1..*" o-- "0..*" Ingredient : "uses"

@enduml
