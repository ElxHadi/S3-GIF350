@startuml

skinparam linetype ortho

skinparam class {
    BackgroundColor<<Factory>> #6b5b95
    BackgroundColor<<Builder>> #86af49
    BackgroundColor<<Singleton>> #d64161
    BackgroundColor<<State>> #ff7b25
    BackgroundColor<<Observer>> #a2b9bc
    BorderColor black
    ArrowColor black
    ClassFontColor black
}

package "com.restaurant.controller" {
    class MenuFactController {
        - view: MenuFactView
        - menu: Menu
        - bill: Bill
        + MenuFactController(menu: Menu, bill: Bill, view: MenuFactView)
        + displayWelcomeMessage(): void
        + displayMenu(): void
        + displayBill(): void
        + run(): void
    }
}

package "com.restaurant.util" {
    enum IngredientType {
        SOLID
        LIQUID
    }
    enum PlatType {
        REGULAR
        KIDS
        HEALTHY
    }
    enum IngredientUnit {
        KG
        G
        MG
        L
        ML
    }
}

package "com.restaurant.model" {

    class Inventory <<Singleton>> {
    - instance : static Inventory
    - stock : HashMap<Ingredient, Double>

    + Inventory()
    + getInstance() : static Inventory
    + addIngredient(Ingredient ingredient, double quantity) : void
    + removeIngredient(Ingredient ingredient, double quantity) : void
    + checkAvailability(Ingredient ingredient, double quantity) : boolean
    + toString() : String @Override
    }

    interface BillState <<State>>{
        + handle(context: BillContext): void
    }

    class BillOpenState <<State>> implements BillState{
        + handle(context: BillContext): void
    }

    class BillClosedState <<State>> implements BillState{
        + handle(context: BillContext): void
    }

    class BillPayedState <<State>> implements BillState{
        + handle(context: BillContext): void
    }

    class Client {
        - idClient: int
        - name: String
        + Client()
        + Client(idClient: int, name: String)
        + toString(): String
    }

    class Ingredient {
        - code: int
        - name: String
        - type: IngredientType
        - pricePerUnit: double
        - unit: IngredientUnit
        + Ingredient()
        + Ingredient(code: int, name: String, type: IngredientType, pricePerUnit: double, unit: IngredientUnit)
        + toString(): String
    }

    class Plat {
        - code: int
        - description: String
        - ingredients: HashMap<Ingredient, Double>
        + Plat()
        + Plat(code: int, description: String, ingredients: HashMap<Ingredient, Double>)
        + addIngredient(ingredient: Ingredient, quantity: double): void
        + removeIngredient(ingredient: Ingredient): void
        + updateIngredientQuantity(ingredient: Ingredient, quantity: double): void
        + getPlatPrice(): double
        + listIngredients(): List<Ingredient>
        + toString(): String
    }

    class KidsPlat {
        - proportion: double
        + KidsPlat(code: int, description: String, ingredients: HashMap<Ingredient, Double>, proportion: double)
        + getPlatPrice(): double
        + toString(): String
    }

    class HealthyPlat {
        - calories: double
        - cholesterol: double
        - fat: double
        + HealthyPlat(code: int, description: String, ingredients: HashMap<Ingredient, Double>, calories: double, cholesterol: double, fat: double)
        + toString(): String
    }

    class Bill implements Subject {
        - date: LocalDateTime
        - billContext: BillContext
        - client: Client
        - plats: HashMap<Plat, Integer>
        + Bill()
        + Bill(date: LocalDateTime, billContext: BillContext, client: Client, plats: HashMap<Plat, Integer>)
        + addPlat(plat: Plat, quantity: int): void
        + removePlat(platCode: int): void
        + modifyBill(platCode: int, quantity: int): void
        + getTotal(): double
        + close(): void
        + pay(): void
        + reopen(): void
        + toString(): String
    }

    class BillContext <<State>> {
        - currentState: BillState
        + BillContext(initialState: BillState)
        + getCurrentState(): BillState
        + setState(newState: BillState): void
        + request(): void
    }

    class Menu {
        - description: String
        - plats: List<Plat>
        + Menu()
        + Menu(description: String, plats: List<Plat>)
        + removePlat(plat: Plat): void
        + addPlat(plat: Plat): void
        + getPlatByCode(code: int): Plat
        + toString(): String
    }

    class PlatBuilder <<Builder>> {
        - type: PlatType
        - code: int
        - description: String
        - ingredients: HashMap<Ingredient, Double>
        - extraParams: double[]
        + PlatBuilder(type: PlatType)
        + setCode(code: int): PlatBuilder
        + setDescription(description: String): PlatBuilder
        + addIngredient(ingredient: Ingredient, quantity: double): PlatBuilder
        + setExtraParams(params: double...): PlatBuilder
        + build(): Plat
    }

    class IngredientFactory <<Factory>>{
        + createIngredient(code: int, name: String, type: IngredientType, pricePerUnit: double, unit: IngredientUnit): Ingredient
    }

    interface Observer <<Observer>> {
        + update(plat: Plat): void
    }

    interface Subject <<Observer>> {
        + registerObserver(observer: Observer): void
        + removeObserver(observer: Observer): void
        + notifyObservers(plat: Plat): void
    }

    class Chef <<Observer>> implements Observer{
        - name: String
        + getName(): String
        + setName(name: String): void
        + update(plat: Plat): void @Override
    }
}

package "com.restaurant.view" {
    class MenuFactView {
        - wlcMessage: String
        + displayMenu(menu: Menu): void
        + displayBill(bill: Bill): void
        + showWelcomeMessage(): void
    }
}

' Associations and cardinalities
MenuFactController "1" -- "1" MenuFactView : "controls"
MenuFactView "1" -- "*" Menu : "displays"
MenuFactView "1" -- "*" Bill : "displays"
Menu "1" o-- "0..*" Plat
Bill "1" o-- "0..*" Plat
Bill "1" o-- "1" Client
Bill "1" *-- "*" BillContext
KidsPlat --|> Plat
HealthyPlat --|> Plat
Bill -- BillState : "has"
PlatBuilder "1" --> "*" Plat : "builds"
PlatBuilder -- PlatType : "uses"
PlatBuilder "1" -- "*" Inventory : "checks"
IngredientFactory "1" --> "*" Ingredient : "makes"
IngredientFactory  --  IngredientType : "uses"
IngredientFactory  --  IngredientUnit: "uses"
Plat "1..*" o-- "0..*" Ingredient
Inventory "1" *-- "0..*" Ingredient

@enduml